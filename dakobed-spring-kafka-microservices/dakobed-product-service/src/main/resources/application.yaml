server:
  port: 8089

amazon.dynamodb.endpoint:
  http://localhost:8000/
amazon.aws.accessKey:

amazon.aws.secretKey:

spring.cloud.stream.bindings.orders-in-0:
  destination: orders

spring.cloud.stream.bindings.orders-out-0:
  destination: vorders

#spring.cloud.stream.bindings.ordersprocess-in-0:
#  destination: orders
#spring.cloud.stream.bindings.ordersprocess-in-1:
#  destination: products
#spring.cloud.stream.bindings.ordersprocess-out-0:
#  destination: order-validations
#spring.cloud.stream.kafka.streams.bindings.ordersprocess-out-0:
#  producer:
#    keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.kafka.streams.bindings.ordersprocess-in-1:
#  consumer:
#    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
#    materializedAs: all-products

spring.cloud.stream.kafka.streams.binder:
  brokers: localhost:9092
  configuration:
    schema.registry.url: http://localhost:8081
    commit.interval.ms: 1000
spring.cloud.stream.kafka.streams.binder.autoAddPartitions: true
spring.cloud.stream.kafka.streams.binder.minPartitionCount: 4
spring.cloud.stream.kafka.streams.binder.configuration.application.server: localhost:8080

spring:
  kafka:
    properties:
      schema.registry.url: http://localhost:8081
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer

spring.cloud.stream.kafka.streams.binder.configuration:
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde

  application:
    name: dakobed-prodocuts
