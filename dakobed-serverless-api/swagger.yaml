swagger: "2.0"
info:
  description: "Dakobed Serverless API"
  version: "1.0.0"
  title: "Dakobed Service"
host: "petstore.com"
basePath: "/v1"
schemes:
- "https"
paths:

#  /guitarset:
#    get:
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: 200 response
#          schema:
#            $ref: "#/definitions/Empty"
#      x-amazon-apigateway-integration:
#        responses:
#          default:
#            statusCode: 200
#        # NOTE: ${LambdaFunction} must match the Lambda resourcename
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:CorsFunction/invocations"
#        passthroughBehavior: when_no_match
#        httpMethod: POST  # Keep "POST" when the API definition method is not POST. This "httpMethod" is used to call Lambda.
#        type: aws_proxy
#  /guitarset/{proxy+}:
#    get:
#      x-amazon-apigateway-auth:
#        type: aws_iam
#      produces:
#      - application/json
#      parameters:
#      - name: proxy
#        in: path
#        required: true
#        type: string
#      responses: {}
#      x-amazon-apigateway-integration:
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:CorsFunction/invocations"
#        httpMethod: POST  # Keep "POST" when the API definition method is not POST. This "httpMethod" is used to call Lambda.
#        type: aws_proxy

  /guitarset:
    options:
      responses:
        200:
          description: "Success"
          headers:
            Access-Control-Allow-Origin:
            Access-Control-Allow-Methods:
            Access-Control-Allow-Headers:
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        httpMethod: "POST"
        responses:
          default:
            statusCode: 200
    get:
      tags:
        - "guitarset"
      summary: "return guitarset model data"
      description: "Returns the guitarset data"
      operationId: "getGuitarsetData"
      produces:
        - "application/json"

      responses:
        200:
          description: "Success"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string

          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GuitarsetQueryFunction/invocations"
        responses:
          default:
            statusCode: 200
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParams\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParams\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"

#
#
#  /snotel:
#    get:
#      tags:
#        - "snotel"
#      summary: "return snotel data by location ID"
#      description: "Returns snotel data for a single location over range of dates specified by query params"
#      operationId: "getSnotelByLocation"
#      produces:
#        - "application/json"
#      parameters:
#        - name: "location"
#          in: "query"
#          description: "ID of location"
#          required: true
#          type: "integer"
#          format: "int64"
#        - name: "sdate"
#          in: "query"
#          description: "starting date"
#          required: true
#          type: "integer"
#          format: "int64"
#        - name: "edate"
#          in: "query"
#          description: "ending date"
#          required: true
#          type: "integer"
#          format: "int64"
#
#      responses:
#        200:
#          description: "Success"
#          schema:
#            $ref: "#/definitions/Empty"
#        400:
#          description: "Bad Request"
#        401:
#          description: "Unauthorized"
#        404:
#          description: "Not Found"
#        500:
#          description: "Internal Server Error"
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:SnotelQueryFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#        requestTemplates:
#          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParams\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParams\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"
#
#
#  /upload:
#    post:
#      tags:
#      - "upload"
#      summary: "Upload a new file to S3"
#      description: ""
#      operationId: "uploadAudio"
#      consumes:
#        - multipart/form-data
#      parameters:
#        - name: file
#          in: formData   # <-----
#          description: The uploaded file data
#          required: true
#          type: file     #
#      produces:
#      - "application/json"
#
#      responses:
#        200:
#          description: "Success"
#        400:
#          description: "Bad Request"
#        401:
#          description: "Unauthorized"
#        500:
#          description: "Internal Server Error"
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:UploadFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#        requestTemplates:
#          application/audio: "{ \r\n \"content\" : $input.body \r\n} "
#
#
#
#  /transcription:
#    post:
#      tags:
#      - "transcription"
#      summary: "Add a new transcription"
#      description: ""
#      operationId: "addTranscription"
#      consumes:
#      - "application/json"
#      produces:
#      - "application/json"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "Audio object that needs to be added to the store"
#        required: true
#        schema:
#          $ref: "#/definitions/Transcription"
#      responses:
#        200:
#          description: "Success"
#        400:
#          description: "Bad Request"
#        401:
#          description: "Unauthorized"
#        500:
#          description: "Internal Server Error"
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:PostTranscriptionFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#        requestTemplates:
#          application/json: "{\r\n  \"body\" : $input.body    \r\n}"
#  /transcription/{transcriptionId}:
#    get:
#      tags:
#      - "pet"
#      summary: "Find Transcription by ID"
#      description: "Returns a single Transcription"
#      operationId: "getTranscriptionByID"
#      produces:
#      - "application/json"
#      parameters:
#      - name: "audioID"
#        in: "path"
#        description: "ID of Transcription to return"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        200:
#          description: "Success"
#          schema:
#            $ref: "#/definitions/Audio"
#        400:
#          description: "Bad Request"
#        401:
#          description: "Unauthorized"
#        404:
#          description: "Not Found"
#        500:
#          description: "Internal Server Error"
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GetTranscriptionFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#        requestTemplates:
#          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParams\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParams\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"
#
#  /transcription/getall/{userID}:
#    get:
#      tags:
#      - "pet"
#      summary: "return all transcriptions belonging to user ID"
#      description: "Returns a single Transcription"
#      operationId: "getTranscriptionByID"
#      produces:
#      - "application/json"
#      parameters:
#      - name: "userID"
#        in: "path"
#        description: "ID of Transcription to return"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        200:
#          description: "Success"
#          schema:
#            $ref: "#/definitions/Audio"
#
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GetUsersTranscriptionsFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#        requestTemplates:
#          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParams\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParams\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"
#
#
#  /audio:
#    x-amazon-apigateway-any-method:
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: 200 response
#          schema:
#            $ref: "#/definitions/Empty"
#      x-amazon-apigateway-integration:
#        responses:
#          default:
#            statusCode: 200
#        # NOTE: ${LambdaFunction} must match the Lambda resourcename
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GuitarsetQueryFunction/invocations"
##          Fn::Sub: "arn:aws:apigateway:us-region:lambda:path/2015-03-31/functions/${GuitarsetQueryFunction.Arn}/invocations"
#
#        passthroughBehavior: when_no_match
#        httpMethod: POST  # Keep "POST" when the API definition method is not POST. This "httpMethod" is used to call Lambda.
#        type: aws_proxy




definitions:
  Empty:
    type: object
    title: Empty Schema
  Transcription:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      userID:
        type: "string"
